/* tslint:disable */
/* eslint-disable */
/**
 * openapi
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.8.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  TicketRequest,
  TicketResponse,
} from '../models/index';
import {
    TicketRequestFromJSON,
    TicketRequestToJSON,
    TicketResponseFromJSON,
    TicketResponseToJSON,
} from '../models/index';

export interface DeleteTicketTicketIdRequest {
    ticketId: string;
    ticketResponse?: TicketResponse;
}

export interface GetTicketTicketIdRequest {
    ticketId: string;
}

export interface GetTicketsByProjectIdRequest {
    projectId: string;
}

export interface PostTicketRequest {
    ticketRequest?: TicketRequest;
}

export interface PutTicketTicketIdRequest {
    ticketId: string;
    ticketRequest?: TicketRequest;
}

/**
 * TicketApi - interface
 * 
 * @export
 * @interface TicketApiInterface
 */
export interface TicketApiInterface {
    /**
     * 
     * @param {string} ticketId 
     * @param {TicketResponse} [ticketResponse] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TicketApiInterface
     */
    deleteTicketTicketIdRaw(requestParameters: DeleteTicketTicketIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     */
    deleteTicketTicketId(ticketId: string, ticketResponse?: TicketResponse, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @param {string} ticketId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TicketApiInterface
     */
    getTicketTicketIdRaw(requestParameters: GetTicketTicketIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TicketResponse>>;

    /**
     */
    getTicketTicketId(ticketId: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TicketResponse>;

    /**
     * 
     * @param {string} projectId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TicketApiInterface
     */
    getTicketsByProjectIdRaw(requestParameters: GetTicketsByProjectIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<TicketResponse>>>;

    /**
     */
    getTicketsByProjectId(projectId: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<TicketResponse>>;

    /**
     * 
     * @param {TicketRequest} [ticketRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TicketApiInterface
     */
    postTicketRaw(requestParameters: PostTicketRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TicketResponse>>;

    /**
     */
    postTicket(ticketRequest?: TicketRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TicketResponse>;

    /**
     * 
     * @param {string} ticketId 
     * @param {TicketRequest} [ticketRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TicketApiInterface
     */
    putTicketTicketIdRaw(requestParameters: PutTicketTicketIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TicketResponse>>;

    /**
     */
    putTicketTicketId(ticketId: string, ticketRequest?: TicketRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TicketResponse>;

}

/**
 * 
 */
export class TicketApi extends runtime.BaseAPI implements TicketApiInterface {

    /**
     */
    async deleteTicketTicketIdRaw(requestParameters: DeleteTicketTicketIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['ticketId'] == null) {
            throw new runtime.RequiredError(
                'ticketId',
                'Required parameter "ticketId" was null or undefined when calling deleteTicketTicketId().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/tickets/{ticketId}`.replace(`{${"ticketId"}}`, encodeURIComponent(String(requestParameters['ticketId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: TicketResponseToJSON(requestParameters['ticketResponse']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async deleteTicketTicketId(ticketId: string, ticketResponse?: TicketResponse, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteTicketTicketIdRaw({ ticketId: ticketId, ticketResponse: ticketResponse }, initOverrides);
    }

    /**
     */
    async getTicketTicketIdRaw(requestParameters: GetTicketTicketIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TicketResponse>> {
        if (requestParameters['ticketId'] == null) {
            throw new runtime.RequiredError(
                'ticketId',
                'Required parameter "ticketId" was null or undefined when calling getTicketTicketId().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/tickets/{ticketId}`.replace(`{${"ticketId"}}`, encodeURIComponent(String(requestParameters['ticketId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TicketResponseFromJSON(jsonValue));
    }

    /**
     */
    async getTicketTicketId(ticketId: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TicketResponse> {
        const response = await this.getTicketTicketIdRaw({ ticketId: ticketId }, initOverrides);
        return await response.value();
    }

    /**
     */
    async getTicketsByProjectIdRaw(requestParameters: GetTicketsByProjectIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<TicketResponse>>> {
        if (requestParameters['projectId'] == null) {
            throw new runtime.RequiredError(
                'projectId',
                'Required parameter "projectId" was null or undefined when calling getTicketsByProjectId().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/projects/{projectId}/tickets`.replace(`{${"projectId"}}`, encodeURIComponent(String(requestParameters['projectId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(TicketResponseFromJSON));
    }

    /**
     */
    async getTicketsByProjectId(projectId: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<TicketResponse>> {
        const response = await this.getTicketsByProjectIdRaw({ projectId: projectId }, initOverrides);
        return await response.value();
    }

    /**
     */
    async postTicketRaw(requestParameters: PostTicketRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TicketResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/tickets`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TicketRequestToJSON(requestParameters['ticketRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TicketResponseFromJSON(jsonValue));
    }

    /**
     */
    async postTicket(ticketRequest?: TicketRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TicketResponse> {
        const response = await this.postTicketRaw({ ticketRequest: ticketRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async putTicketTicketIdRaw(requestParameters: PutTicketTicketIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TicketResponse>> {
        if (requestParameters['ticketId'] == null) {
            throw new runtime.RequiredError(
                'ticketId',
                'Required parameter "ticketId" was null or undefined when calling putTicketTicketId().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/tickets/{ticketId}`.replace(`{${"ticketId"}}`, encodeURIComponent(String(requestParameters['ticketId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: TicketRequestToJSON(requestParameters['ticketRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TicketResponseFromJSON(jsonValue));
    }

    /**
     */
    async putTicketTicketId(ticketId: string, ticketRequest?: TicketRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TicketResponse> {
        const response = await this.putTicketTicketIdRaw({ ticketId: ticketId, ticketRequest: ticketRequest }, initOverrides);
        return await response.value();
    }

}
