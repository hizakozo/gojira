/* tslint:disable */
/* eslint-disable */
/**
 * openapi
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.8.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime.ts';
import type {
  ProjectRequest,
  ProjectResponse,
} from '../models';
import {
    ProjectRequestFromJSON,
    ProjectRequestToJSON,
    ProjectResponseFromJSON,
    ProjectResponseToJSON,
} from '../models';

export interface DeleteProjectProjectIdRequest {
    projectId: string;
    projectResponse?: ProjectResponse;
}

export interface GetProjectProjectIdRequest {
    projectId: string;
}

export interface PostProjectRequest {
    projectRequest?: ProjectRequest;
}

export interface PutProjectProjectIdRequest {
    projectId: string;
    projectRequest?: ProjectRequest;
}

/**
 * ProjectApi - interface
 * 
 * @export
 * @interface ProjectApiInterface
 */
export interface ProjectApiInterface {
    /**
     * 
     * @param {string} projectId 
     * @param {ProjectResponse} [projectResponse] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectApiInterface
     */
    deleteProjectProjectIdRaw(requestParameters: DeleteProjectProjectIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     */
    deleteProjectProjectId(projectId: string, projectResponse?: ProjectResponse, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @param {string} projectId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectApiInterface
     */
    getProjectProjectIdRaw(requestParameters: GetProjectProjectIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProjectResponse>>;

    /**
     */
    getProjectProjectId(projectId: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProjectResponse>;

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectApiInterface
     */
    getProjectsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ProjectResponse>>>;

    /**
     */
    getProjects(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ProjectResponse>>;

    /**
     * 
     * @param {ProjectRequest} [projectRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectApiInterface
     */
    postProjectRaw(requestParameters: PostProjectRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProjectResponse>>;

    /**
     */
    postProject(projectRequest?: ProjectRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProjectResponse>;

    /**
     * 
     * @param {string} projectId 
     * @param {ProjectRequest} [projectRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectApiInterface
     */
    putProjectProjectIdRaw(requestParameters: PutProjectProjectIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProjectResponse>>;

    /**
     */
    putProjectProjectId(projectId: string, projectRequest?: ProjectRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProjectResponse>;

}

/**
 * 
 */
export class ProjectApi extends runtime.BaseAPI implements ProjectApiInterface {

    /**
     */
    async deleteProjectProjectIdRaw(requestParameters: DeleteProjectProjectIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['projectId'] == null) {
            throw new runtime.RequiredError(
                'projectId',
                'Required parameter "projectId" was null or undefined when calling deleteProjectProjectId().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/projects/{projectId}`.replace(`{${"projectId"}}`, encodeURIComponent(String(requestParameters['projectId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: ProjectResponseToJSON(requestParameters['projectResponse']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async deleteProjectProjectId(projectId: string, projectResponse?: ProjectResponse, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteProjectProjectIdRaw({ projectId: projectId, projectResponse: projectResponse }, initOverrides);
    }

    /**
     */
    async getProjectProjectIdRaw(requestParameters: GetProjectProjectIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProjectResponse>> {
        if (requestParameters['projectId'] == null) {
            throw new runtime.RequiredError(
                'projectId',
                'Required parameter "projectId" was null or undefined when calling getProjectProjectId().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/projects/{projectId}`.replace(`{${"projectId"}}`, encodeURIComponent(String(requestParameters['projectId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProjectResponseFromJSON(jsonValue));
    }

    /**
     */
    async getProjectProjectId(projectId: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProjectResponse> {
        const response = await this.getProjectProjectIdRaw({ projectId: projectId }, initOverrides);
        return await response.value();
    }

    /**
     */
    async getProjectsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ProjectResponse>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/projects`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ProjectResponseFromJSON));
    }

    /**
     */
    async getProjects(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ProjectResponse>> {
        const response = await this.getProjectsRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async postProjectRaw(requestParameters: PostProjectRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProjectResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/projects`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ProjectRequestToJSON(requestParameters['projectRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProjectResponseFromJSON(jsonValue));
    }

    /**
     */
    async postProject(projectRequest?: ProjectRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProjectResponse> {
        const response = await this.postProjectRaw({ projectRequest: projectRequest }, initOverrides);
        return await response.value();
    }

    /**
     */
    async putProjectProjectIdRaw(requestParameters: PutProjectProjectIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProjectResponse>> {
        if (requestParameters['projectId'] == null) {
            throw new runtime.RequiredError(
                'projectId',
                'Required parameter "projectId" was null or undefined when calling putProjectProjectId().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/projects/{projectId}`.replace(`{${"projectId"}}`, encodeURIComponent(String(requestParameters['projectId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ProjectRequestToJSON(requestParameters['projectRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProjectResponseFromJSON(jsonValue));
    }

    /**
     */
    async putProjectProjectId(projectId: string, projectRequest?: ProjectRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProjectResponse> {
        const response = await this.putProjectProjectIdRaw({ projectId: projectId, projectRequest: projectRequest }, initOverrides);
        return await response.value();
    }

}
